// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/wireguard_peers.go

// Package services_test is a generated GoMock package.
package services_test

import (
	reflect "reflect"
	models "tunnel-provisioner-service/models"

	gomock "github.com/golang/mock/gomock"
)

// MockWireguardPeersRepository is a mock of WireguardPeersRepository interface.
type MockWireguardPeersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWireguardPeersRepositoryMockRecorder
}

// MockWireguardPeersRepositoryMockRecorder is the mock recorder for MockWireguardPeersRepository.
type MockWireguardPeersRepositoryMockRecorder struct {
	mock *MockWireguardPeersRepository
}

// NewMockWireguardPeersRepository creates a new mock instance.
func NewMockWireguardPeersRepository(ctrl *gomock.Controller) *MockWireguardPeersRepository {
	mock := &MockWireguardPeersRepository{ctrl: ctrl}
	mock.recorder = &MockWireguardPeersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWireguardPeersRepository) EXPECT() *MockWireguardPeersRepositoryMockRecorder {
	return m.recorder
}

// DeletePeer mocks base method.
func (m *MockWireguardPeersRepository) DeletePeer(peer *models.WireguardPeerModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePeer", peer)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePeer indicates an expected call of DeletePeer.
func (mr *MockWireguardPeersRepositoryMockRecorder) DeletePeer(peer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePeer", reflect.TypeOf((*MockWireguardPeersRepository)(nil).DeletePeer), peer)
}

// GetAll mocks base method.
func (m *MockWireguardPeersRepository) GetAll() ([]*models.WireguardPeerModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.WireguardPeerModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockWireguardPeersRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockWireguardPeersRepository)(nil).GetAll))
}

// GetPeerById mocks base method.
func (m *MockWireguardPeersRepository) GetPeerById(username, id string) (*models.WireguardPeerModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerById", username, id)
	ret0, _ := ret[0].(*models.WireguardPeerModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerById indicates an expected call of GetPeerById.
func (mr *MockWireguardPeersRepositoryMockRecorder) GetPeerById(username, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerById", reflect.TypeOf((*MockWireguardPeersRepository)(nil).GetPeerById), username, id)
}

// GetPeersByTunnelId mocks base method.
func (m *MockWireguardPeersRepository) GetPeersByTunnelId(tunnelId string) ([]*models.WireguardPeerModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeersByTunnelId", tunnelId)
	ret0, _ := ret[0].([]*models.WireguardPeerModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeersByTunnelId indicates an expected call of GetPeersByTunnelId.
func (mr *MockWireguardPeersRepositoryMockRecorder) GetPeersByTunnelId(tunnelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeersByTunnelId", reflect.TypeOf((*MockWireguardPeersRepository)(nil).GetPeersByTunnelId), tunnelId)
}

// GetPeersByUsername mocks base method.
func (m *MockWireguardPeersRepository) GetPeersByUsername(username string) ([]*models.WireguardPeerModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeersByUsername", username)
	ret0, _ := ret[0].([]*models.WireguardPeerModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeersByUsername indicates an expected call of GetPeersByUsername.
func (mr *MockWireguardPeersRepositoryMockRecorder) GetPeersByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeersByUsername", reflect.TypeOf((*MockWireguardPeersRepository)(nil).GetPeersByUsername), username)
}

// SavePeer mocks base method.
func (m *MockWireguardPeersRepository) SavePeer(peer *models.WireguardPeerModel) (*models.WireguardPeerModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePeer", peer)
	ret0, _ := ret[0].(*models.WireguardPeerModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePeer indicates an expected call of SavePeer.
func (mr *MockWireguardPeersRepositoryMockRecorder) SavePeer(peer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePeer", reflect.TypeOf((*MockWireguardPeersRepository)(nil).SavePeer), peer)
}

// UpdatePeer mocks base method.
func (m *MockWireguardPeersRepository) UpdatePeer(peer *models.WireguardPeerModel) (*models.WireguardPeerModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePeer", peer)
	ret0, _ := ret[0].(*models.WireguardPeerModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePeer indicates an expected call of UpdatePeer.
func (mr *MockWireguardPeersRepositoryMockRecorder) UpdatePeer(peer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePeer", reflect.TypeOf((*MockWireguardPeersRepository)(nil).UpdatePeer), peer)
}
