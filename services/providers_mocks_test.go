// Code generated by MockGen. DO NOT EDIT.
// Source: services/providers.go

// Package services_test is a generated GoMock package.
package services_test

import (
	net "net"
	reflect "reflect"
	models "tunnel-provisioner-service/models"
	services "tunnel-provisioner-service/services"

	gomock "github.com/golang/mock/gomock"
)

// MockWireguardTunnelProvider is a mock of WireguardTunnelProvider interface.
type MockWireguardTunnelProvider struct {
	ctrl     *gomock.Controller
	recorder *MockWireguardTunnelProviderMockRecorder
}

// MockWireguardTunnelProviderMockRecorder is the mock recorder for MockWireguardTunnelProvider.
type MockWireguardTunnelProviderMockRecorder struct {
	mock *MockWireguardTunnelProvider
}

// NewMockWireguardTunnelProvider creates a new mock instance.
func NewMockWireguardTunnelProvider(ctrl *gomock.Controller) *MockWireguardTunnelProvider {
	mock := &MockWireguardTunnelProvider{ctrl: ctrl}
	mock.recorder = &MockWireguardTunnelProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWireguardTunnelProvider) EXPECT() *MockWireguardTunnelProviderMockRecorder {
	return m.recorder
}

// CreatePeer mocks base method.
func (m *MockWireguardTunnelProvider) CreatePeer(publicKey, description, psk string, tunnelInfo *models.WireguardTunnelInfo, profileInfo *models.WireguardTunnelProfileInfo, peerAddress net.IP) (*services.WireguardProviderPeer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePeer", publicKey, description, psk, tunnelInfo, profileInfo, peerAddress)
	ret0, _ := ret[0].(*services.WireguardProviderPeer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePeer indicates an expected call of CreatePeer.
func (mr *MockWireguardTunnelProviderMockRecorder) CreatePeer(publicKey, description, psk, tunnelInfo, profileInfo, peerAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePeer", reflect.TypeOf((*MockWireguardTunnelProvider)(nil).CreatePeer), publicKey, description, psk, tunnelInfo, profileInfo, peerAddress)
}

// DeletePeerByPublicKey mocks base method.
func (m *MockWireguardTunnelProvider) DeletePeerByPublicKey(tunnelInfo *models.WireguardTunnelInfo, publicKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePeerByPublicKey", tunnelInfo, publicKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePeerByPublicKey indicates an expected call of DeletePeerByPublicKey.
func (mr *MockWireguardTunnelProviderMockRecorder) DeletePeerByPublicKey(tunnelInfo, publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePeerByPublicKey", reflect.TypeOf((*MockWireguardTunnelProvider)(nil).DeletePeerByPublicKey), tunnelInfo, publicKey)
}

// GetInterfaceIp mocks base method.
func (m *MockWireguardTunnelProvider) GetInterfaceIp(interfaceName string) (net.IP, *net.IPNet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterfaceIp", interfaceName)
	ret0, _ := ret[0].(net.IP)
	ret1, _ := ret[1].(*net.IPNet)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInterfaceIp indicates an expected call of GetInterfaceIp.
func (mr *MockWireguardTunnelProviderMockRecorder) GetInterfaceIp(interfaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterfaceIp", reflect.TypeOf((*MockWireguardTunnelProvider)(nil).GetInterfaceIp), interfaceName)
}

// GetPeerByPublicKey mocks base method.
func (m *MockWireguardTunnelProvider) GetPeerByPublicKey(publicKey string, tunnelInfo *models.WireguardTunnelInfo) (*services.WireguardProviderPeer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerByPublicKey", publicKey, tunnelInfo)
	ret0, _ := ret[0].(*services.WireguardProviderPeer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerByPublicKey indicates an expected call of GetPeerByPublicKey.
func (mr *MockWireguardTunnelProviderMockRecorder) GetPeerByPublicKey(publicKey, tunnelInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerByPublicKey", reflect.TypeOf((*MockWireguardTunnelProvider)(nil).GetPeerByPublicKey), publicKey, tunnelInfo)
}

// GetTunnelInterfaceInfo mocks base method.
func (m *MockWireguardTunnelProvider) GetTunnelInterfaceInfo(interfaceName string) (*services.WireguardInterfaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTunnelInterfaceInfo", interfaceName)
	ret0, _ := ret[0].(*services.WireguardInterfaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTunnelInterfaceInfo indicates an expected call of GetTunnelInterfaceInfo.
func (mr *MockWireguardTunnelProviderMockRecorder) GetTunnelInterfaceInfo(interfaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTunnelInterfaceInfo", reflect.TypeOf((*MockWireguardTunnelProvider)(nil).GetTunnelInterfaceInfo), interfaceName)
}

// OnClose mocks base method.
func (m *MockWireguardTunnelProvider) OnClose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnClose")
}

// OnClose indicates an expected call of OnClose.
func (mr *MockWireguardTunnelProviderMockRecorder) OnClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnClose", reflect.TypeOf((*MockWireguardTunnelProvider)(nil).OnClose))
}

// UpdatePeer mocks base method.
func (m *MockWireguardTunnelProvider) UpdatePeer(id, pubKey, description, psk string, tunnelInfo *models.WireguardTunnelInfo, profileInfo *models.WireguardTunnelProfileInfo, peerAddress net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePeer", id, pubKey, description, psk, tunnelInfo, profileInfo, peerAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePeer indicates an expected call of UpdatePeer.
func (mr *MockWireguardTunnelProviderMockRecorder) UpdatePeer(id, pubKey, description, psk, tunnelInfo, profileInfo, peerAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePeer", reflect.TypeOf((*MockWireguardTunnelProvider)(nil).UpdatePeer), id, pubKey, description, psk, tunnelInfo, profileInfo, peerAddress)
}
