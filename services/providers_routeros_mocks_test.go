// Code generated by MockGen. DO NOT EDIT.
// Source: services/providers_routeros.go

// Package services_test is a generated GoMock package.
package services_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	routeros "gopkg.in/routeros.v2"
)

// MockRouterOSRawApiClient is a mock of RouterOSRawApiClient interface.
type MockRouterOSRawApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouterOSRawApiClientMockRecorder
}

// MockRouterOSRawApiClientMockRecorder is the mock recorder for MockRouterOSRawApiClient.
type MockRouterOSRawApiClientMockRecorder struct {
	mock *MockRouterOSRawApiClient
}

// NewMockRouterOSRawApiClient creates a new mock instance.
func NewMockRouterOSRawApiClient(ctrl *gomock.Controller) *MockRouterOSRawApiClient {
	mock := &MockRouterOSRawApiClient{ctrl: ctrl}
	mock.recorder = &MockRouterOSRawApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterOSRawApiClient) EXPECT() *MockRouterOSRawApiClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRouterOSRawApiClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRouterOSRawApiClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRouterOSRawApiClient)(nil).Close))
}

// RunArgs mocks base method.
func (m *MockRouterOSRawApiClient) RunArgs(args ...string) (*routeros.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunArgs", varargs...)
	ret0, _ := ret[0].(*routeros.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunArgs indicates an expected call of RunArgs.
func (mr *MockRouterOSRawApiClientMockRecorder) RunArgs(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunArgs", reflect.TypeOf((*MockRouterOSRawApiClient)(nil).RunArgs), args...)
}
